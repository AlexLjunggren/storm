package com.ljunggren.storm.builders;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import com.ljunggren.reflectionUtils.ReflectionUtils;
import com.ljunggren.storm.util.AnnotationUtils;
import com.ljunggren.storm.util.ExceptionUtils;

public class InsertBatchQueryBuilder extends QueryBuilder {

    private Object object;
    private List<Field> fields;
    
    public InsertBatchQueryBuilder(Object[] object) {
        this.object = object;
        this.fields = ReflectionUtils.getObjectFields(object[0].getClass());
    }
    
    @Override
    public String buildSQL() {
        return new InsertQueryBuilder(((Object[]) object)[0]).buildSQL();
    }

    @Override
    public Object[] getArgs() {
        List<Object> arguments = Arrays.stream((Object[]) object)
                .map(object -> getArgs(object))
                .collect(Collectors.toList());
        return arguments.toArray();
    }
    
    private Object[] getArgs(Object object) {
        return fields.stream()
                .filter(field -> !AnnotationUtils.isAutoGeneratedId(field))
                .filter(field -> !AnnotationUtils.isTransient(field))
                .filter(field -> !field.isSynthetic())
                .filter(field -> ReflectionUtils.isPrimitive(field.getType()) || ReflectionUtils.isString(field.getType()))
                .map(ExceptionUtils.rethrowFunction(field -> ReflectionUtils.getFieldValue(field, object)))
                .toArray();
    }

}