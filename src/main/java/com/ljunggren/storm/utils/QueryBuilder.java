package com.ljunggren.storm.utils;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;

import com.ljunggren.storm.annotation.entity.ColumnProperty;
import com.ljunggren.storm.annotation.entity.Id;
import com.ljunggren.storm.annotation.entity.Table;
import com.ljunggren.storm.entity.Generated;

public class QueryBuilder {
    
    private Object object;
    private List<Field> fields;
    private Field idField;
    
    public static final String INSERT = "insert into %s (%s) values (%s)";
    public static final String UPDATE = "update %s set %s where %s = ?";
    public static final String DELETE = "delete from %s where %s = ?";
    
    public QueryBuilder(Object object) {
        this.object = object;
        this.fields = ReflectionUtils.getObjectFields(object.getClass());
        this.idField = findIdField(fields);
    }

    public String buildInsertSQL() {
        String table = getTableName(object.getClass());
        List<String> columns = getColumnNames(fields);
        List<String> questionMarks = generateQuestionMarks(columns);
        return String.format(INSERT, table, StringUtils.join(columns, ", "), StringUtils.join(questionMarks, ", "));
    }
    
    public Object[] getInsertArgs() {
        List<Object> arguments = fields.stream()
                .filter(field -> !isAutoGeneratedId(field))
                .filter(field -> !field.isSynthetic())
                .map(field -> ReflectionUtils.getFieldValue(field, object))
                .collect(Collectors.toList());
        return arguments.toArray();
    }
    
    public String buildUpdateSQL() {
        String table = getTableName(object.getClass());
        List<String> columns = getColumnNames(fields).stream()
                .map(column -> column + " = ?").collect(Collectors.toList());
        String idName = idField.getName();
        return String.format(UPDATE, table, StringUtils.join(columns, ", "), idName);
    }
    
    public Object[] getUpdateArgs() {
        List<Object> arguments = fields.stream()
                .filter(field -> field != idField)
                .filter(field -> !field.isSynthetic())
                .map(field -> ReflectionUtils.getFieldValue(field, object))
                .collect(Collectors.toList());
        arguments.add(ReflectionUtils.getFieldValue(idField, object));
        return arguments.toArray();
    }
    
    public String buildDeleteSQL() {
        String table = getTableName(object.getClass());
        String idName = idField.getName();
        return String.format(DELETE, table, idName);
    }
    
    public Object[] getDeleteArgs() {
        return new Object[] {ReflectionUtils.getFieldValue(idField, object)};
    }
    
    private String getTableName(Class<?> clazz) {
        return Arrays.stream(clazz.getDeclaredAnnotations())
                .filter(annotation -> annotation.annotationType() == Table.class)
                .map(annotation -> ((Table) annotation).name())
                .findFirst()
                .orElse(null);
    }
    
    private List<String> getColumnNames(List<Field> fields) {
        return fields.stream()
                .filter(field -> !isAutoGeneratedId(field))
                .filter(field -> !field.isSynthetic())
                .map(field -> {
                    Annotation columnProperty = getAnnotationFromField(ColumnProperty.class, field);
                    if (columnProperty != null) {
                        return ((ColumnProperty) columnProperty).name();
                    }
                    return field.getName();
                }).collect(Collectors.toList());
    }
    
    private boolean isAutoGeneratedId(Field field) {
        Annotation id = getAnnotationFromField(Id.class, field);
        if (id != null && ((Id) id).generated() == Generated.AUTO) {
            return true;
        }
        return false;
    }
    
    private Annotation getAnnotationFromField(Class<?> clazz, Field field) {
        return Arrays.stream(field.getAnnotations())
                .filter(annotation -> annotation.annotationType() == clazz)
                .findFirst()
                .orElse(null);
    }
    
    private List<String> generateQuestionMarks(List<String> list) {
        return list.stream().map(item -> "?").collect(Collectors.toList());
    }
    
    private Field findIdField(List<Field> fields) {
        return fields.stream().filter(field -> getAnnotationFromField(Id.class, field) != null)
                .findFirst()
                .orElse(null);
    }
    
}
